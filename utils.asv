%% HELPER FUNCTIONS RECCOMENDATIONS
classdef utils
    methods(Static)
        function [m,s] = stat(x)
            n = length(x);
            m = sum(x)/n;
            s = sqrt(sum((x-m).^2/n));
        end
        
        %turnTillLine(): turns in place (center of mass doesn%t move) until the 
        %reflectance sensor reads a  line detected condition.
        function rotate(nb, direction)
           if direction == 'right'
               nb.setMotor(1, moffScale * 12)
           end
           if direction == 'right'
               nb.setMotor(2, moffScale * 12)
           end
        end
        
        %kickMotors(): briefly sets the motors to a high duty cycle before returning 
        %to modify the duty cycle in a function that calls it. Helps to break the 
        %static friction of the gearbox so that the motor can operate at lower duty cycles.
        function kickMotors(nb, mOffScale)
            nb.setMotor(1, mOffScale * 12);
            nb.setMotor(2, -12);
        end
        
        %attemptCenter(): once a line is detected under the reflectance array, 
        %kicks the motors before setting them to zero and looping to slowly center 
        % the array on the line.
        function attemptCenter()
        
        end
        
        %approachWall(): drives in a straight line until the front ultrasonic 
        %sensor reads below a certain value.
        function approachWall(nb)
            mOffScale = 0.95; % Start with 1 so both motors have same duty cycle.

            motorBaseSpeed = 11;
            
            % Set the duty cycle of each motor
            m1Duty = mOffScale * motorBaseSpeed;
            m2Duty = -motorBaseSpeed;
            
            tic
            nb.setMotor(1, mOffScale * 12);
            nb.setMotor(2, -12);
            pause(0.03);
            while (nb.ultrasonicRead1 > 428) % adjust the time to test if robot goes in straight line
                            % (shorter time saves battery; or longer tests longer path)
                nb.setMotor(1, m1Duty);
                nb.setMotor(2, m2Duty);
            end
            % Turn off the motors
            nb.setMotor(1, 0);
            nb.setMotor(2, 0);
        end
        
        %setMotorsToZero(): sets the motors on the robot to 0% duty cycle
        function setMotorsToZero
        
        end
        
        %allDark(): checks the reflectance array values to see if all of the values
        %are above the threshold needed to classify as "dark.‚Äù Returns true/false.
        function isDark = allDark()
            isDark=true;
        end
        
        %turnOffLine(): moves the reflectance array off of a line or bar by turning
        %in place by a certain amount or for a certain time.
    end
end
